/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICOInterface extends ethers.utils.Interface {
  functions: {
    "beneficiario()": FunctionFragment;
    "comprarTokens()": FunctionFragment;
    "montoRecaudado()": FunctionFragment;
    "retirarFondos()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenPrecio()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beneficiario",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comprarTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "montoRecaudado",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retirarFondos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrecio",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiario",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comprarTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "montoRecaudado",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retirarFondos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrecio",
    data: BytesLike
  ): Result;

  events: {
    "TokensComprados(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokensComprados"): EventFragment;
}

export type TokensCompradosEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    comprador: string;
    cantidad: BigNumber;
    monto: BigNumber;
  }
>;

export class ICO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICOInterface;

  functions: {
    beneficiario(overrides?: CallOverrides): Promise<[string]>;

    comprarTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    montoRecaudado(overrides?: CallOverrides): Promise<[BigNumber]>;

    retirarFondos(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenPrecio(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  beneficiario(overrides?: CallOverrides): Promise<string>;

  comprarTokens(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  montoRecaudado(overrides?: CallOverrides): Promise<BigNumber>;

  retirarFondos(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenPrecio(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    beneficiario(overrides?: CallOverrides): Promise<string>;

    comprarTokens(overrides?: CallOverrides): Promise<void>;

    montoRecaudado(overrides?: CallOverrides): Promise<BigNumber>;

    retirarFondos(overrides?: CallOverrides): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenPrecio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TokensComprados(address,uint256,uint256)"(
      comprador?: null,
      cantidad?: null,
      monto?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { comprador: string; cantidad: BigNumber; monto: BigNumber }
    >;

    TokensComprados(
      comprador?: null,
      cantidad?: null,
      monto?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { comprador: string; cantidad: BigNumber; monto: BigNumber }
    >;
  };

  estimateGas: {
    beneficiario(overrides?: CallOverrides): Promise<BigNumber>;

    comprarTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    montoRecaudado(overrides?: CallOverrides): Promise<BigNumber>;

    retirarFondos(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrecio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beneficiario(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comprarTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    montoRecaudado(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retirarFondos(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrecio(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
